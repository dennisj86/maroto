// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	core "github.com/johnfercher/maroto/v2/pkg/core"
	builder "github.com/johnfercher/maroto/v2/pkg/processor/components/builder"

	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/pkg/processor/components/props"

	provider "github.com/johnfercher/maroto/v2/pkg/processor/provider"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// ConfigureBuilder provides a mock function with given fields: _a0
func (_m *Provider) ConfigureBuilder(_a0 builder.Builder) provider.Provider {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureBuilder")
	}

	var r0 provider.Provider
	if rf, ok := ret.Get(0).(func(builder.Builder) provider.Provider); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}

	return r0
}

// Provider_ConfigureBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureBuilder'
type Provider_ConfigureBuilder_Call struct {
	*mock.Call
}

// ConfigureBuilder is a helper method to define mock.On call
//   - _a0 builder.Builder
func (_e *Provider_Expecter) ConfigureBuilder(_a0 interface{}) *Provider_ConfigureBuilder_Call {
	return &Provider_ConfigureBuilder_Call{Call: _e.mock.On("ConfigureBuilder", _a0)}
}

func (_c *Provider_ConfigureBuilder_Call) Run(run func(_a0 builder.Builder)) *Provider_ConfigureBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(builder.Builder))
	})
	return _c
}

func (_c *Provider_ConfigureBuilder_Call) Return(_a0 provider.Provider) *Provider_ConfigureBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_ConfigureBuilder_Call) RunAndReturn(run func(builder.Builder) provider.Provider) *Provider_ConfigureBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBarCode provides a mock function with given fields: value, _a1
func (_m *Provider) CreateBarCode(value string, _a1 props.BarCodeProps) core.Component {
	ret := _m.Called(value, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBarCode")
	}

	var r0 core.Component
	if rf, ok := ret.Get(0).(func(string, props.BarCodeProps) core.Component); ok {
		r0 = rf(value, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Component)
		}
	}

	return r0
}

// Provider_CreateBarCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBarCode'
type Provider_CreateBarCode_Call struct {
	*mock.Call
}

// CreateBarCode is a helper method to define mock.On call
//   - value string
//   - _a1 props.BarCodeProps
func (_e *Provider_Expecter) CreateBarCode(value interface{}, _a1 interface{}) *Provider_CreateBarCode_Call {
	return &Provider_CreateBarCode_Call{Call: _e.mock.On("CreateBarCode", value, _a1)}
}

func (_c *Provider_CreateBarCode_Call) Run(run func(value string, _a1 props.BarCodeProps)) *Provider_CreateBarCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(props.BarCodeProps))
	})
	return _c
}

func (_c *Provider_CreateBarCode_Call) Return(_a0 core.Component) *Provider_CreateBarCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CreateBarCode_Call) RunAndReturn(run func(string, props.BarCodeProps) core.Component) *Provider_CreateBarCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCol provides a mock function with given fields: size, components
func (_m *Provider) CreateCol(size int, components ...core.Component) core.Col {
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, size)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCol")
	}

	var r0 core.Col
	if rf, ok := ret.Get(0).(func(int, ...core.Component) core.Col); ok {
		r0 = rf(size, components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Col)
		}
	}

	return r0
}

// Provider_CreateCol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCol'
type Provider_CreateCol_Call struct {
	*mock.Call
}

// CreateCol is a helper method to define mock.On call
//   - size int
//   - components ...core.Component
func (_e *Provider_Expecter) CreateCol(size interface{}, components ...interface{}) *Provider_CreateCol_Call {
	return &Provider_CreateCol_Call{Call: _e.mock.On("CreateCol",
		append([]interface{}{size}, components...)...)}
}

func (_c *Provider_CreateCol_Call) Run(run func(size int, components ...core.Component)) *Provider_CreateCol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]core.Component, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(core.Component)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *Provider_CreateCol_Call) Return(_a0 core.Col) *Provider_CreateCol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CreateCol_Call) RunAndReturn(run func(int, ...core.Component) core.Col) *Provider_CreateCol_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePage provides a mock function with given fields: components
func (_m *Provider) CreatePage(components ...core.Row) core.Page {
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePage")
	}

	var r0 core.Page
	if rf, ok := ret.Get(0).(func(...core.Row) core.Page); ok {
		r0 = rf(components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Page)
		}
	}

	return r0
}

// Provider_CreatePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePage'
type Provider_CreatePage_Call struct {
	*mock.Call
}

// CreatePage is a helper method to define mock.On call
//   - components ...core.Row
func (_e *Provider_Expecter) CreatePage(components ...interface{}) *Provider_CreatePage_Call {
	return &Provider_CreatePage_Call{Call: _e.mock.On("CreatePage",
		append([]interface{}{}, components...)...)}
}

func (_c *Provider_CreatePage_Call) Run(run func(components ...core.Row)) *Provider_CreatePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]core.Row, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(core.Row)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Provider_CreatePage_Call) Return(_a0 core.Page) *Provider_CreatePage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CreatePage_Call) RunAndReturn(run func(...core.Row) core.Page) *Provider_CreatePage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRow provides a mock function with given fields: components
func (_m *Provider) CreateRow(components ...core.Col) core.Row {
	_va := make([]interface{}, len(components))
	for _i := range components {
		_va[_i] = components[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRow")
	}

	var r0 core.Row
	if rf, ok := ret.Get(0).(func(...core.Col) core.Row); ok {
		r0 = rf(components...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Row)
		}
	}

	return r0
}

// Provider_CreateRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRow'
type Provider_CreateRow_Call struct {
	*mock.Call
}

// CreateRow is a helper method to define mock.On call
//   - components ...core.Col
func (_e *Provider_Expecter) CreateRow(components ...interface{}) *Provider_CreateRow_Call {
	return &Provider_CreateRow_Call{Call: _e.mock.On("CreateRow",
		append([]interface{}{}, components...)...)}
}

func (_c *Provider_CreateRow_Call) Run(run func(components ...core.Col)) *Provider_CreateRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]core.Col, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(core.Col)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Provider_CreateRow_Call) Return(_a0 core.Row) *Provider_CreateRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CreateRow_Call) RunAndReturn(run func(...core.Col) core.Row) *Provider_CreateRow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateText provides a mock function with given fields: value, _a1
func (_m *Provider) CreateText(value string, _a1 props.TextProps) core.Component {
	ret := _m.Called(value, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateText")
	}

	var r0 core.Component
	if rf, ok := ret.Get(0).(func(string, props.TextProps) core.Component); ok {
		r0 = rf(value, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Component)
		}
	}

	return r0
}

// Provider_CreateText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateText'
type Provider_CreateText_Call struct {
	*mock.Call
}

// CreateText is a helper method to define mock.On call
//   - value string
//   - _a1 props.TextProps
func (_e *Provider_Expecter) CreateText(value interface{}, _a1 interface{}) *Provider_CreateText_Call {
	return &Provider_CreateText_Call{Call: _e.mock.On("CreateText", value, _a1)}
}

func (_c *Provider_CreateText_Call) Run(run func(value string, _a1 props.TextProps)) *Provider_CreateText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(props.TextProps))
	})
	return _c
}

func (_c *Provider_CreateText_Call) Return(_a0 core.Component) *Provider_CreateText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CreateText_Call) RunAndReturn(run func(string, props.TextProps) core.Component) *Provider_CreateText_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePdf provides a mock function with given fields:
func (_m *Provider) GeneratePdf() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratePdf")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_GeneratePdf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePdf'
type Provider_GeneratePdf_Call struct {
	*mock.Call
}

// GeneratePdf is a helper method to define mock.On call
func (_e *Provider_Expecter) GeneratePdf() *Provider_GeneratePdf_Call {
	return &Provider_GeneratePdf_Call{Call: _e.mock.On("GeneratePdf")}
}

func (_c *Provider_GeneratePdf_Call) Run(run func()) *Provider_GeneratePdf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GeneratePdf_Call) Return(_a0 []byte, _a1 error) *Provider_GeneratePdf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_GeneratePdf_Call) RunAndReturn(run func() ([]byte, error)) *Provider_GeneratePdf_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterFooter provides a mock function with given fields: rows
func (_m *Provider) RegisterFooter(rows ...core.Row) provider.Provider {
	_va := make([]interface{}, len(rows))
	for _i := range rows {
		_va[_i] = rows[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterFooter")
	}

	var r0 provider.Provider
	if rf, ok := ret.Get(0).(func(...core.Row) provider.Provider); ok {
		r0 = rf(rows...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}

	return r0
}

// Provider_RegisterFooter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterFooter'
type Provider_RegisterFooter_Call struct {
	*mock.Call
}

// RegisterFooter is a helper method to define mock.On call
//   - rows ...core.Row
func (_e *Provider_Expecter) RegisterFooter(rows ...interface{}) *Provider_RegisterFooter_Call {
	return &Provider_RegisterFooter_Call{Call: _e.mock.On("RegisterFooter",
		append([]interface{}{}, rows...)...)}
}

func (_c *Provider_RegisterFooter_Call) Run(run func(rows ...core.Row)) *Provider_RegisterFooter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]core.Row, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(core.Row)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Provider_RegisterFooter_Call) Return(_a0 provider.Provider) *Provider_RegisterFooter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_RegisterFooter_Call) RunAndReturn(run func(...core.Row) provider.Provider) *Provider_RegisterFooter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHeader provides a mock function with given fields: rows
func (_m *Provider) RegisterHeader(rows ...core.Row) provider.Provider {
	_va := make([]interface{}, len(rows))
	for _i := range rows {
		_va[_i] = rows[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHeader")
	}

	var r0 provider.Provider
	if rf, ok := ret.Get(0).(func(...core.Row) provider.Provider); ok {
		r0 = rf(rows...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(provider.Provider)
		}
	}

	return r0
}

// Provider_RegisterHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHeader'
type Provider_RegisterHeader_Call struct {
	*mock.Call
}

// RegisterHeader is a helper method to define mock.On call
//   - rows ...core.Row
func (_e *Provider_Expecter) RegisterHeader(rows ...interface{}) *Provider_RegisterHeader_Call {
	return &Provider_RegisterHeader_Call{Call: _e.mock.On("RegisterHeader",
		append([]interface{}{}, rows...)...)}
}

func (_c *Provider_RegisterHeader_Call) Run(run func(rows ...core.Row)) *Provider_RegisterHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]core.Row, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(core.Row)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Provider_RegisterHeader_Call) Return(_a0 provider.Provider) *Provider_RegisterHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_RegisterHeader_Call) RunAndReturn(run func(...core.Row) provider.Provider) *Provider_RegisterHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
