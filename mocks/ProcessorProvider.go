// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	propsmapper "github.com/johnfercher/maroto/v2/pkg/processor/mappers/propsmapper"
	processorprovider "github.com/johnfercher/maroto/v2/pkg/processor/processorprovider"
	mock "github.com/stretchr/testify/mock"
)

// ProcessorProvider is an autogenerated mock type for the ProcessorProvider type
type ProcessorProvider struct {
	mock.Mock
}

type ProcessorProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessorProvider) EXPECT() *ProcessorProvider_Expecter {
	return &ProcessorProvider_Expecter{mock: &_m.Mock}
}

// CreateBarCode provides a mock function with given fields: value, props
func (_m *ProcessorProvider) CreateBarCode(value string, props ...*propsmapper.Barcode) processorprovider.PDFComponent {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBarCode")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func(string, ...*propsmapper.Barcode) processorprovider.PDFComponent); ok {
		r0 = rf(value, props...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateBarCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBarCode'
type ProcessorProvider_CreateBarCode_Call struct {
	*mock.Call
}

// CreateBarCode is a helper method to define mock.On call
//   - value string
//   - props ...*propsmapper.Barcode
func (_e *ProcessorProvider_Expecter) CreateBarCode(value interface{}, props ...interface{}) *ProcessorProvider_CreateBarCode_Call {
	return &ProcessorProvider_CreateBarCode_Call{Call: _e.mock.On("CreateBarCode",
		append([]interface{}{value}, props...)...)}
}

func (_c *ProcessorProvider_CreateBarCode_Call) Run(run func(value string, props ...*propsmapper.Barcode)) *ProcessorProvider_CreateBarCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*propsmapper.Barcode, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*propsmapper.Barcode)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProcessorProvider_CreateBarCode_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateBarCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateBarCode_Call) RunAndReturn(run func(string, ...*propsmapper.Barcode) processorprovider.PDFComponent) *ProcessorProvider_CreateBarCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function with given fields: value, extension, props
func (_m *ProcessorProvider) CreateImage(value []byte, extension string, props ...*propsmapper.Rect) processorprovider.PDFComponent {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value, extension)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func([]byte, string, ...*propsmapper.Rect) processorprovider.PDFComponent); ok {
		r0 = rf(value, extension, props...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type ProcessorProvider_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - value []byte
//   - extension string
//   - props ...*propsmapper.Rect
func (_e *ProcessorProvider_Expecter) CreateImage(value interface{}, extension interface{}, props ...interface{}) *ProcessorProvider_CreateImage_Call {
	return &ProcessorProvider_CreateImage_Call{Call: _e.mock.On("CreateImage",
		append([]interface{}{value, extension}, props...)...)}
}

func (_c *ProcessorProvider_CreateImage_Call) Run(run func(value []byte, extension string, props ...*propsmapper.Rect)) *ProcessorProvider_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*propsmapper.Rect, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*propsmapper.Rect)
			}
		}
		run(args[0].([]byte), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProcessorProvider_CreateImage_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateImage_Call) RunAndReturn(run func([]byte, string, ...*propsmapper.Rect) processorprovider.PDFComponent) *ProcessorProvider_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLine provides a mock function with given fields: props
func (_m *ProcessorProvider) CreateLine(props *propsmapper.Line) processorprovider.PDFComponent {
	ret := _m.Called(props)

	if len(ret) == 0 {
		panic("no return value specified for CreateLine")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func(*propsmapper.Line) processorprovider.PDFComponent); ok {
		r0 = rf(props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLine'
type ProcessorProvider_CreateLine_Call struct {
	*mock.Call
}

// CreateLine is a helper method to define mock.On call
//   - props *propsmapper.Line
func (_e *ProcessorProvider_Expecter) CreateLine(props interface{}) *ProcessorProvider_CreateLine_Call {
	return &ProcessorProvider_CreateLine_Call{Call: _e.mock.On("CreateLine", props)}
}

func (_c *ProcessorProvider_CreateLine_Call) Run(run func(props *propsmapper.Line)) *ProcessorProvider_CreateLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*propsmapper.Line))
	})
	return _c
}

func (_c *ProcessorProvider_CreateLine_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateLine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateLine_Call) RunAndReturn(run func(*propsmapper.Line) processorprovider.PDFComponent) *ProcessorProvider_CreateLine_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMatrixCode provides a mock function with given fields: value, props
func (_m *ProcessorProvider) CreateMatrixCode(value string, props ...*propsmapper.Rect) processorprovider.PDFComponent {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMatrixCode")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func(string, ...*propsmapper.Rect) processorprovider.PDFComponent); ok {
		r0 = rf(value, props...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateMatrixCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMatrixCode'
type ProcessorProvider_CreateMatrixCode_Call struct {
	*mock.Call
}

// CreateMatrixCode is a helper method to define mock.On call
//   - value string
//   - props ...*propsmapper.Rect
func (_e *ProcessorProvider_Expecter) CreateMatrixCode(value interface{}, props ...interface{}) *ProcessorProvider_CreateMatrixCode_Call {
	return &ProcessorProvider_CreateMatrixCode_Call{Call: _e.mock.On("CreateMatrixCode",
		append([]interface{}{value}, props...)...)}
}

func (_c *ProcessorProvider_CreateMatrixCode_Call) Run(run func(value string, props ...*propsmapper.Rect)) *ProcessorProvider_CreateMatrixCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*propsmapper.Rect, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*propsmapper.Rect)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProcessorProvider_CreateMatrixCode_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateMatrixCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateMatrixCode_Call) RunAndReturn(run func(string, ...*propsmapper.Rect) processorprovider.PDFComponent) *ProcessorProvider_CreateMatrixCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQrCode provides a mock function with given fields: value, props
func (_m *ProcessorProvider) CreateQrCode(value string, props ...*propsmapper.Rect) processorprovider.PDFComponent {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQrCode")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func(string, ...*propsmapper.Rect) processorprovider.PDFComponent); ok {
		r0 = rf(value, props...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateQrCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQrCode'
type ProcessorProvider_CreateQrCode_Call struct {
	*mock.Call
}

// CreateQrCode is a helper method to define mock.On call
//   - value string
//   - props ...*propsmapper.Rect
func (_e *ProcessorProvider_Expecter) CreateQrCode(value interface{}, props ...interface{}) *ProcessorProvider_CreateQrCode_Call {
	return &ProcessorProvider_CreateQrCode_Call{Call: _e.mock.On("CreateQrCode",
		append([]interface{}{value}, props...)...)}
}

func (_c *ProcessorProvider_CreateQrCode_Call) Run(run func(value string, props ...*propsmapper.Rect)) *ProcessorProvider_CreateQrCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*propsmapper.Rect, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*propsmapper.Rect)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProcessorProvider_CreateQrCode_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateQrCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateQrCode_Call) RunAndReturn(run func(string, ...*propsmapper.Rect) processorprovider.PDFComponent) *ProcessorProvider_CreateQrCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSignature provides a mock function with given fields: value, props
func (_m *ProcessorProvider) CreateSignature(value string, props ...*propsmapper.Signature) processorprovider.PDFComponent {
	_va := make([]interface{}, len(props))
	for _i := range props {
		_va[_i] = props[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSignature")
	}

	var r0 processorprovider.PDFComponent
	if rf, ok := ret.Get(0).(func(string, ...*propsmapper.Signature) processorprovider.PDFComponent); ok {
		r0 = rf(value, props...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processorprovider.PDFComponent)
		}
	}

	return r0
}

// ProcessorProvider_CreateSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSignature'
type ProcessorProvider_CreateSignature_Call struct {
	*mock.Call
}

// CreateSignature is a helper method to define mock.On call
//   - value string
//   - props ...*propsmapper.Signature
func (_e *ProcessorProvider_Expecter) CreateSignature(value interface{}, props ...interface{}) *ProcessorProvider_CreateSignature_Call {
	return &ProcessorProvider_CreateSignature_Call{Call: _e.mock.On("CreateSignature",
		append([]interface{}{value}, props...)...)}
}

func (_c *ProcessorProvider_CreateSignature_Call) Run(run func(value string, props ...*propsmapper.Signature)) *ProcessorProvider_CreateSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*propsmapper.Signature, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*propsmapper.Signature)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ProcessorProvider_CreateSignature_Call) Return(_a0 processorprovider.PDFComponent) *ProcessorProvider_CreateSignature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessorProvider_CreateSignature_Call) RunAndReturn(run func(string, ...*propsmapper.Signature) processorprovider.PDFComponent) *ProcessorProvider_CreateSignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessorProvider creates a new instance of ProcessorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessorProvider(t interface {
	mock.TestingT
	Cleanup(func())
},
) *ProcessorProvider {
	mock := &ProcessorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
