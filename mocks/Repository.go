// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetDocument provides a mock function with given fields: documentName
func (_m *Repository) GetDocument(documentName string) (string, []byte, error) {
	ret := _m.Called(documentName)

	if len(ret) == 0 {
		panic("no return value specified for GetDocument")
	}

	var r0 string
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, []byte, error)); ok {
		return rf(documentName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(documentName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) []byte); ok {
		r1 = rf(documentName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(documentName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocument'
type Repository_GetDocument_Call struct {
	*mock.Call
}

// GetDocument is a helper method to define mock.On call
//   - documentName string
func (_e *Repository_Expecter) GetDocument(documentName interface{}) *Repository_GetDocument_Call {
	return &Repository_GetDocument_Call{Call: _e.mock.On("GetDocument", documentName)}
}

func (_c *Repository_GetDocument_Call) Run(run func(documentName string)) *Repository_GetDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetDocument_Call) Return(extension string, doc []byte, err error) *Repository_GetDocument_Call {
	_c.Call.Return(extension, doc, err)
	return _c
}

func (_c *Repository_GetDocument_Call) RunAndReturn(run func(string) (string, []byte, error)) *Repository_GetDocument_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTemplate provides a mock function with given fields: templateName
func (_m *Repository) ReadTemplate(templateName string) (map[string]interface{}, error) {
	ret := _m.Called(templateName)

	if len(ret) == 0 {
		panic("no return value specified for ReadTemplate")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(templateName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ReadTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTemplate'
type Repository_ReadTemplate_Call struct {
	*mock.Call
}

// ReadTemplate is a helper method to define mock.On call
//   - templateName string
func (_e *Repository_Expecter) ReadTemplate(templateName interface{}) *Repository_ReadTemplate_Call {
	return &Repository_ReadTemplate_Call{Call: _e.mock.On("ReadTemplate", templateName)}
}

func (_c *Repository_ReadTemplate_Call) Run(run func(templateName string)) *Repository_ReadTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_ReadTemplate_Call) Return(_a0 map[string]interface{}, _a1 error) *Repository_ReadTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ReadTemplate_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *Repository_ReadTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTemplate provides a mock function with given fields: templateName, template
func (_m *Repository) RegisterTemplate(templateName string, template map[string]interface{}) error {
	ret := _m.Called(templateName, template)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(templateName, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RegisterTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTemplate'
type Repository_RegisterTemplate_Call struct {
	*mock.Call
}

// RegisterTemplate is a helper method to define mock.On call
//   - templateName string
//   - template map[string]interface{}
func (_e *Repository_Expecter) RegisterTemplate(templateName interface{}, template interface{}) *Repository_RegisterTemplate_Call {
	return &Repository_RegisterTemplate_Call{Call: _e.mock.On("RegisterTemplate", templateName, template)}
}

func (_c *Repository_RegisterTemplate_Call) Run(run func(templateName string, template map[string]interface{})) *Repository_RegisterTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Repository_RegisterTemplate_Call) Return(_a0 error) *Repository_RegisterTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RegisterTemplate_Call) RunAndReturn(run func(string, map[string]interface{}) error) *Repository_RegisterTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
