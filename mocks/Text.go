// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/johnfercher/maroto/v2/pkg/core/entity"
	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/pkg/props"
)

// Text is an autogenerated mock type for the Text type
type Text struct {
	mock.Mock
}

type Text_Expecter struct {
	mock *mock.Mock
}

func (_m *Text) EXPECT() *Text_Expecter {
	return &Text_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: text, cell, textProp
func (_m *Text) Add(text string, cell *entity.Cell, textProp *props.Text) {
	_m.Called(text, cell, textProp)
}

// Text_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Text_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - text string
//   - cell *entity.Cell
//   - textProp *props.Text
func (_e *Text_Expecter) Add(text interface{}, cell interface{}, textProp interface{}) *Text_Add_Call {
	return &Text_Add_Call{Call: _e.mock.On("Add", text, cell, textProp)}
}

func (_c *Text_Add_Call) Run(run func(text string, cell *entity.Cell, textProp *props.Text)) *Text_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entity.Cell), args[2].(*props.Text))
	})
	return _c
}

func (_c *Text_Add_Call) Return() *Text_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *Text_Add_Call) RunAndReturn(run func(string, *entity.Cell, *props.Text)) *Text_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddCustomText provides a mock function with given fields: subs, cell, textPs
func (_m *Text) AddCustomText(subs []*entity.SubText, cell *entity.Cell, textPs *props.Text) {
	_m.Called(subs, cell, textPs)
}

// Text_AddCustomText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCustomText'
type Text_AddCustomText_Call struct {
	*mock.Call
}

// AddCustomText is a helper method to define mock.On call
//   - subs []*entity.SubText
//   - cell *entity.Cell
//   - textPs *props.Text
func (_e *Text_Expecter) AddCustomText(subs interface{}, cell interface{}, textPs interface{}) *Text_AddCustomText_Call {
	return &Text_AddCustomText_Call{Call: _e.mock.On("AddCustomText", subs, cell, textPs)}
}

func (_c *Text_AddCustomText_Call) Run(run func(subs []*entity.SubText, cell *entity.Cell, textPs *props.Text)) *Text_AddCustomText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*entity.SubText), args[1].(*entity.Cell), args[2].(*props.Text))
	})
	return _c
}

func (_c *Text_AddCustomText_Call) Return() *Text_AddCustomText_Call {
	_c.Call.Return()
	return _c
}

func (_c *Text_AddCustomText_Call) RunAndReturn(run func([]*entity.SubText, *entity.Cell, *props.Text)) *Text_AddCustomText_Call {
	_c.Call.Return(run)
	return _c
}

// GetTextHeight provides a mock function with given fields: text, textProp, colWidth
func (_m *Text) GetTextHeight(text []*entity.SubText, textProp *props.Text, colWidth float64) float64 {
	ret := _m.Called(text, textProp, colWidth)

	if len(ret) == 0 {
		panic("no return value specified for GetTextHeight")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func([]*entity.SubText, *props.Text, float64) float64); ok {
		r0 = rf(text, textProp, colWidth)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Text_GetTextHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTextHeight'
type Text_GetTextHeight_Call struct {
	*mock.Call
}

// GetTextHeight is a helper method to define mock.On call
//   - text []*entity.SubText
//   - textProp *props.Text
//   - colWidth float64
func (_e *Text_Expecter) GetTextHeight(text interface{}, textProp interface{}, colWidth interface{}) *Text_GetTextHeight_Call {
	return &Text_GetTextHeight_Call{Call: _e.mock.On("GetTextHeight", text, textProp, colWidth)}
}

func (_c *Text_GetTextHeight_Call) Run(run func(text []*entity.SubText, textProp *props.Text, colWidth float64)) *Text_GetTextHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*entity.SubText), args[1].(*props.Text), args[2].(float64))
	})
	return _c
}

func (_c *Text_GetTextHeight_Call) Return(_a0 float64) *Text_GetTextHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Text_GetTextHeight_Call) RunAndReturn(run func([]*entity.SubText, *props.Text, float64) float64) *Text_GetTextHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewText creates a new instance of Text. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewText(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Text {
	mock := &Text{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
