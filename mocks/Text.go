// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/johnfercher/maroto/v2/pkg/core/entity"
	mock "github.com/stretchr/testify/mock"

	props "github.com/johnfercher/maroto/v2/pkg/props"
)

// Text is an autogenerated mock type for the Text type
type Text struct {
	mock.Mock
}

type Text_Expecter struct {
	mock *mock.Mock
}

func (_m *Text) EXPECT() *Text_Expecter {
	return &Text_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: text, cell, textProp
func (_m *Text) Add(text string, cell *entity.Cell, textProp *props.Text) {
	_m.Called(text, cell, textProp)
}

// Text_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Text_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - text string
//   - cell *entity.Cell
//   - textProp *props.Text
func (_e *Text_Expecter) Add(text interface{}, cell interface{}, textProp interface{}) *Text_Add_Call {
	return &Text_Add_Call{Call: _e.mock.On("Add", text, cell, textProp)}
}

func (_c *Text_Add_Call) Run(run func(text string, cell *entity.Cell, textProp *props.Text)) *Text_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entity.Cell), args[2].(*props.Text))
	})
	return _c
}

func (_c *Text_Add_Call) Return() *Text_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *Text_Add_Call) RunAndReturn(run func(string, *entity.Cell, *props.Text)) *Text_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddCustomText provides a mock function with given fields: cell, textPs, subs
func (_m *Text) AddCustomText(cell *entity.Cell, textPs *props.Text, subs ...*entity.SubText) {
	_va := make([]interface{}, len(subs))
	for _i := range subs {
		_va[_i] = subs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cell, textPs)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Text_AddCustomText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCustomText'
type Text_AddCustomText_Call struct {
	*mock.Call
}

// AddCustomText is a helper method to define mock.On call
//   - cell *entity.Cell
//   - textPs *props.Text
//   - subs ...*entity.SubText
func (_e *Text_Expecter) AddCustomText(cell interface{}, textPs interface{}, subs ...interface{}) *Text_AddCustomText_Call {
	return &Text_AddCustomText_Call{Call: _e.mock.On("AddCustomText",
		append([]interface{}{cell, textPs}, subs...)...)}
}

func (_c *Text_AddCustomText_Call) Run(run func(cell *entity.Cell, textPs *props.Text, subs ...*entity.SubText)) *Text_AddCustomText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*entity.SubText, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*entity.SubText)
			}
		}
		run(args[0].(*entity.Cell), args[1].(*props.Text), variadicArgs...)
	})
	return _c
}

func (_c *Text_AddCustomText_Call) Return() *Text_AddCustomText_Call {
	_c.Call.Return()
	return _c
}

func (_c *Text_AddCustomText_Call) RunAndReturn(run func(*entity.Cell, *props.Text, ...*entity.SubText)) *Text_AddCustomText_Call {
	_c.Call.Return(run)
	return _c
}

// GetTextHeight provides a mock function with given fields: textProp, colWidth, text
func (_m *Text) GetTextHeight(textProp *props.Text, colWidth float64, text ...*entity.SubText) float64 {
	_va := make([]interface{}, len(text))
	for _i := range text {
		_va[_i] = text[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, textProp, colWidth)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTextHeight")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(*props.Text, float64, ...*entity.SubText) float64); ok {
		r0 = rf(textProp, colWidth, text...)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Text_GetTextHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTextHeight'
type Text_GetTextHeight_Call struct {
	*mock.Call
}

// GetTextHeight is a helper method to define mock.On call
//   - textProp *props.Text
//   - colWidth float64
//   - text ...*entity.SubText
func (_e *Text_Expecter) GetTextHeight(textProp interface{}, colWidth interface{}, text ...interface{}) *Text_GetTextHeight_Call {
	return &Text_GetTextHeight_Call{Call: _e.mock.On("GetTextHeight",
		append([]interface{}{textProp, colWidth}, text...)...)}
}

func (_c *Text_GetTextHeight_Call) Run(run func(textProp *props.Text, colWidth float64, text ...*entity.SubText)) *Text_GetTextHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*entity.SubText, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*entity.SubText)
			}
		}
		run(args[0].(*props.Text), args[1].(float64), variadicArgs...)
	})
	return _c
}

func (_c *Text_GetTextHeight_Call) Return(_a0 float64) *Text_GetTextHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Text_GetTextHeight_Call) RunAndReturn(run func(*props.Text, float64, ...*entity.SubText) float64) *Text_GetTextHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewText creates a new instance of Text. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewText(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Text {
	mock := &Text{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
