// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	core "github.com/johnfercher/maroto/v2/pkg/core"
	mock "github.com/stretchr/testify/mock"

	processorprovider "github.com/johnfercher/maroto/v2/pkg/processor/processorprovider"
)

// PdfComponent is an autogenerated mock type for the PdfComponent type
type PdfComponent struct {
	mock.Mock
}

type PdfComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *PdfComponent) EXPECT() *PdfComponent_Expecter {
	return &PdfComponent_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: provider
func (_m *PdfComponent) Generate(provider processorprovider.ProcessorProvider) core.Component {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 core.Component
	if rf, ok := ret.Get(0).(func(processorprovider.ProcessorProvider) core.Component); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Component)
		}
	}

	return r0
}

// PdfComponent_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type PdfComponent_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - provider processorprovider.ProcessorProvider
func (_e *PdfComponent_Expecter) Generate(provider interface{}) *PdfComponent_Generate_Call {
	return &PdfComponent_Generate_Call{Call: _e.mock.On("Generate", provider)}
}

func (_c *PdfComponent_Generate_Call) Run(run func(provider processorprovider.ProcessorProvider)) *PdfComponent_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(processorprovider.ProcessorProvider))
	})
	return _c
}

func (_c *PdfComponent_Generate_Call) Return(_a0 core.Component) *PdfComponent_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PdfComponent_Generate_Call) RunAndReturn(run func(processorprovider.ProcessorProvider) core.Component) *PdfComponent_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewPdfComponent creates a new instance of PdfComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPdfComponent(t interface {
	mock.TestingT
	Cleanup(func())
},
) *PdfComponent {
	mock := &PdfComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
